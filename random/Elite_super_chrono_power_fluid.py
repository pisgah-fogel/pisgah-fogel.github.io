# This script is an experiment to estimation power generated by a cyclist on a Elite suprt chrono power fluid hometrainer

# Require:
# pip install python-dateutil

# Lookup table (Power (Watts), Speed (Km/h))
lookup = [
    [0.0, 0.0],
    [100.0, 20.0],
    [200.0, 26.5],
    [300.0, 30.5],
    [400.0, 34.0],
    [500.0, 36.5],
    [600.0, 39.0],
    [700.0, 41.3],
    [800.0, 43.2],
    [900.0, 45.0],
    [1000.0, 46.5]
]

maxheartrate=200

ftp=300

def cvt_speed_pwr(speed):
    speed = float(speed)
    if speed >= 46.5:
        print("Error: You are too powerfull")
        return 1000
    for i in range(len(lookup)):
        if speed >= lookup[i][1] and speed <= lookup[i+1][1]:
            pwr = lookup[i][0] + (lookup[i+1][0]-lookup[i][0])*(speed-lookup[i][1])/(lookup[i+1][1]-lookup[i][1])
            #print("%f Km/h -> %f Watts" % (speed, pwr))
            return pwr

def trackpoint_to_dic(trackpoint):
    from dateutil.parser import parse
    import time
    dic = {}
    power_available = False
    if len(trackpoint.getElementsByTagName('Time')) > 0:
        dic["TimeStamp"] = time.mktime(parse(trackpoint.getElementsByTagName('Time')[0].firstChild.data).timetuple())
    if len(trackpoint.getElementsByTagName('HeartRateBpm')) > 0:
        dic["HeartRate"] = int(trackpoint.getElementsByTagName('HeartRateBpm')[0].childNodes[1].firstChild.data)
    if len(trackpoint.getElementsByTagName('DistanceMeters')) > 0:
        dic["DistanceMeters"] = float(trackpoint.getElementsByTagName('DistanceMeters')[0].firstChild.data)
    if len(trackpoint.getElementsByTagName('ns3:Speed')) > 0:
        dic["Speed"] = 3.6*float(trackpoint.getElementsByTagName('ns3:Speed')[0].firstChild.data)
    if len(trackpoint.getElementsByTagName('ns3:Watts')) > 0:
        dic["Power"] = int(trackpoint.getElementsByTagName('ns3:Watts')[0].firstChild.data)
        power_available = True
    if len(trackpoint.getElementsByTagName('Cadence')) > 0:
        dic["Cadence"] = int(trackpoint.getElementsByTagName('Cadence')[0].firstChild.data)
    if len(trackpoint.getElementsByTagName('AltitudeMeters')) > 0:
        dic["Altitude"] = float(trackpoint.getElementsByTagName('AltitudeMeters')[0].firstChild.data)
    return (dic, power_available)

def correct_altitude(list):
    # Find first altitude
    first_altitude = 0
    for item in list:
        if item != -10000:
            first_altitude = item
            break
    for i in range(len(list)):
        if list[i] == -10000:
            list[i] = first_altitude
        else:
            first_altitude = list[i]
    return list

def plot_activity(filename):
    from xml.dom import minidom
    mydoc = minidom.parse(filename)
    trackpoints = mydoc.getElementsByTagName('Trackpoint')

    # Debug: TODO: remove after tests
    trackpoints = trackpoints[2345:4000]

    time = []
    distance = []
    heartrate = []
    speed = []
    cadence = []
    power_elite = []
    power = []
    altitude = []
    power_available = False
    for trackpoint in trackpoints:
        parsed, power_available = trackpoint_to_dic(trackpoint)
        time.append(parsed["TimeStamp"])
        if "HeartRate" in parsed:
            heartrate.append(parsed["HeartRate"])
        else:
            heartrate.append(0)
        if "DistanceMeters" in parsed:
            distance.append(parsed["DistanceMeters"])
        else:
            distance.append(0)
        if "Speed" in parsed:
            speed.append(parsed["Speed"])
            if not power_available:
                power_elite.append(cvt_speed_pwr(parsed["Speed"]))
        else:
            speed.append(0)
            if not power_available:
                power_elite.append(0)
        if "Power" in parsed:
            power.append(parsed["Power"])
        else:
            power.append(0)
        if "Cadence" in parsed:
            cadence.append(parsed["Cadence"])
        else:
            cadence.append(0)
        if "Altitude" in parsed:
            altitude.append(parsed["Altitude"])
        else:
            altitude.append(-10000)
    
    altitude = correct_altitude(altitude)

    import matplotlib
    import matplotlib.pyplot as plt
    import numpy as np
    plt.subplot(5, 1, 1)
    plt.plot(time, speed, 'g')
    plt.xlabel('Time (s)')
    plt.ylabel('Speed (Km/h)')
    plt.grid()

    if not power_available:
        plt.subplot(5, 1, 2)
        plt.plot(time, power_elite, 'r')
        plt.xlabel('Time (s)')
        plt.ylabel('Power on home trainer (W)')
        plt.axhspan(0.56*ftp, 0.75*ftp, facecolor='lavender', alpha=0.5)
        plt.axhspan(0.75*ftp, 0.90*ftp, facecolor='skyblue', alpha=0.5)
        plt.axhspan(0.90*ftp, 1.05*ftp, facecolor='green', alpha=0.5)
        plt.axhspan(1.05*ftp, 1.20*ftp, facecolor='tomato', alpha=0.5)
        plt.axhspan(1.20*ftp, 1.40*ftp, facecolor='red', alpha=0.5)
        plt.grid()
    else:
        plt.subplot(5, 1, 2)
        plt.plot(time, power, 'r')
        plt.xlabel('Time (s)')
        plt.ylabel('Assioma Duo Power (W)')
        plt.axhspan(0.56*ftp, 0.75*ftp, facecolor='lavender', alpha=0.5)
        plt.axhspan(0.75*ftp, 0.90*ftp, facecolor='skyblue', alpha=0.5)
        plt.axhspan(0.90*ftp, 1.05*ftp, facecolor='green', alpha=0.5)
        plt.axhspan(1.05*ftp, 1.20*ftp, facecolor='tomato', alpha=0.5)
        plt.axhspan(1.20*ftp, 1.40*ftp, facecolor='red', alpha=0.5)
        plt.grid()

    plt.subplot(5, 1, 4)
    plt.plot(time, heartrate, 'm')
    plt.xlabel('Time (s)')
    plt.ylabel('Heartrate (bpm)')
    plt.axhspan(0.60*maxheartrate, 0.65*maxheartrate, facecolor='lavender', alpha=0.5)
    plt.axhspan(0.65*maxheartrate, 0.75*maxheartrate, facecolor='skyblue', alpha=0.5)
    plt.axhspan(0.75*maxheartrate, 0.82*maxheartrate, facecolor='green', alpha=0.5)
    plt.axhspan(0.82*maxheartrate, 0.89*maxheartrate, facecolor='tomato', alpha=0.5)
    plt.axhspan(0.89*maxheartrate, maxheartrate, facecolor='red', alpha=0.5)
    
    plt.grid()

    plt.subplot(5, 1, 3)
    plt.plot(time, cadence)
    plt.xlabel('Time (s)')
    plt.ylabel('Cadence (rpm)')
    plt.grid()

    plt.subplot(5, 1, 5)
    plt.plot(time, altitude)
    plt.xlabel('Time (s)')
    plt.ylabel('Altitude (m)')
    plt.grid()

    plt.show()


from tkinter import filedialog
from tkinter import *

root = Tk()
root.withdraw()
root.update()
filename = filedialog.askopenfilename(filetypes=(("Garmin tcx", "All *")))
root.destroy()
plot_activity(filename)

