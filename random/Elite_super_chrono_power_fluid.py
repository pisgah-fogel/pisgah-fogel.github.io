# This script is an experiment to estimation power generated by a cyclist on a Elite suprt chrono power fluid hometrainer

# Require:
# pip install python-dateutil

# Lookup table (Power (Watts), Speed (Km/h))
lookup = [
    [0.0, 0.0],
    [100.0, 20.0],
    [200.0, 26.5],
    [300.0, 30.5],
    [400.0, 34.0],
    [500.0, 36.5],
    [600.0, 39.0],
    [700.0, 41.3],
    [800.0, 43.2],
    [900.0, 45.0],
    [1000.0, 46.5]
]

def cvt_speed_pwr(speed):
    speed = float(speed)
    if speed >= 46.5:
        print("Error: You are too powerfull")
        return 1000
    for i in range(len(lookup)):
        if speed >= lookup[i][1] and speed <= lookup[i+1][1]:
            pwr = lookup[i][0] + (lookup[i+1][0]-lookup[i][0])*(speed-lookup[i][1])/(lookup[i+1][1]-lookup[i][1])
            #print("%f Km/h -> %f Watts" % (speed, pwr))
            return pwr

cvt_speed_pwr(30)

def trackpoint_to_dic(trackpoint):
    from dateutil.parser import parse
    import time
    dic = {}
    if len(trackpoint.getElementsByTagName('Time')) > 0:
        dic["TimeStamp"] = time.mktime(parse(trackpoint.getElementsByTagName('Time')[0].firstChild.data).timetuple())
    if len(trackpoint.getElementsByTagName('HeartRateBpm')) > 0:
        dic["HeartRate"] = int(trackpoint.getElementsByTagName('HeartRateBpm')[0].childNodes[1].firstChild.data)
    if len(trackpoint.getElementsByTagName('DistanceMeters')) > 0:
        dic["DistanceMeters"] = float(trackpoint.getElementsByTagName('DistanceMeters')[0].firstChild.data)
    if len(trackpoint.getElementsByTagName('ns3:Speed')) > 0:
        dic["Speed"] = 3.6*float(trackpoint.getElementsByTagName('ns3:Speed')[0].firstChild.data)
    if len(trackpoint.getElementsByTagName('Cadence')) > 0:
        dic["Cadence"] = int(trackpoint.getElementsByTagName('Cadence')[0].firstChild.data)
    return dic

def plot_activity(filename):
    from xml.dom import minidom
    mydoc = minidom.parse(filename)
    trackpoints = mydoc.getElementsByTagName('Trackpoint')

    time = []
    distance = []
    heartrate = []
    power = []
    speed = []
    cadence = []
    power = []
    for trackpoint in trackpoints:
        parsed = trackpoint_to_dic(trackpoint)
        time.append(parsed["TimeStamp"])
        if "HeartRate" in parsed:
            heartrate.append(parsed["HeartRate"])
        else:
            heartrate.append(0)
        if "DistanceMeters" in parsed:
            distance.append(parsed["DistanceMeters"])
        else:
            distance.append(0)
        if "Speed" in parsed:
            speed.append(parsed["Speed"])
            power.append(cvt_speed_pwr(parsed["Speed"]))
        else:
            speed.append(0)
            power.append(0)
        if "Cadence" in parsed:
            cadence.append(parsed["Cadence"])
        else:
            cadence.append(0)
    
    import matplotlib
    import matplotlib.pyplot as plt
    import numpy as np
    plt.subplot(4, 1, 1)
    plt.plot(time, speed, 'g')
    plt.xlabel('Time (s)')
    plt.ylabel('Speed (Km/h)')
    plt.grid()

    plt.subplot(4, 1, 2)
    plt.plot(time, power, 'r')
    plt.xlabel('Time (s)')
    plt.ylabel('Power (W)')
    
    plt.grid()
    plt.subplot(4, 1, 4)
    plt.plot(time, heartrate, 'm')
    plt.xlabel('Time (s)')
    plt.ylabel('Heartrate (bpm)')
    
    plt.grid()

    plt.subplot(4, 1, 3)
    plt.plot(time, cadence)
    plt.xlabel('Time (s)')
    plt.ylabel('Cadence (rpm)')
    plt.grid()

    plt.show()


from tkinter import filedialog
from tkinter import *

root = Tk()
root.withdraw()
root.update()
filename = filedialog.askopenfilename(filetypes=(("Garmin tcx", "All *")))
root.destroy()
plot_activity(filename)

